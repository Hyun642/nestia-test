/**
 * @packageDocumentation
 * @module api.functional.post
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, Resolved, tags } from "typia";
import typia from "typia";

import type {
  IErrorResponse,
  IPageRequest,
  IPost,
  ISuccessResponse,
} from "../../../post/Interfaces/IPost.interface";

/**
 * @controller PostController.create
 * @path POST /post
 * @accessor api.functional.post.create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: create.Body,
): Promise<create.Output> {
  return true === connection.simulate
    ? create.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          template: create.METADATA.path,
          path: create.path(),
        },
        input,
      );
}
export namespace create {
  export type Body = Primitive<IPost.ICreate>;
  export type Output = Primitive<IPost.ISummary>;

  export const METADATA = {
    method: "POST",
    path: "/post",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/post";
  export const random = (): Resolved<Primitive<IPost.ISummary>> =>
    typia.random<Primitive<IPost.ISummary>>();
  export const simulate = (connection: IConnection, input: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random();
  };
}

/**
 * @controller PostController.findAll
 * @path GET /post
 * @accessor api.functional.post.findAll
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
  query: findAll.Query,
): Promise<findAll.Output> {
  return true === connection.simulate
    ? findAll.simulate(connection, query)
    : PlainFetcher.fetch(connection, {
        ...findAll.METADATA,
        template: findAll.METADATA.path,
        path: findAll.path(query),
      });
}
export namespace findAll {
  export type Query = Resolved<IPageRequest>;
  export type Output = Primitive<IPost.ISummary[]>;

  export const METADATA = {
    method: "GET",
    path: "/post",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/post";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): Resolved<Primitive<IPost.ISummary[]>> =>
    typia.random<Primitive<IPost.ISummary[]>>();
  export const simulate = (connection: IConnection, query: Query): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(query));
    return random();
  };
}

/**
 * @throws 404 게시글 ID를 찾을 수 없음
 * @controller PostController.findOne
 * @path GET /post/:id
 * @accessor api.functional.post.findOne
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findOne(
  connection: IConnection,
  postId: string & tags.Format<"uuid">,
): Promise<findOne.Output> {
  return true === connection.simulate
    ? findOne.simulate(connection, postId)
    : PlainFetcher.fetch(connection, {
        ...findOne.METADATA,
        template: findOne.METADATA.path,
        path: findOne.path(postId),
      });
}
export namespace findOne {
  export type Output = Primitive<IPost.ISummary>;

  export const METADATA = {
    method: "GET",
    path: "/post/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (postId: string & tags.Format<"uuid">) =>
    `/post/${encodeURIComponent(postId?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<IPost.ISummary>> =>
    typia.random<Primitive<IPost.ISummary>>();
  export const simulate = (
    connection: IConnection,
    postId: string & tags.Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(postId),
      contentType: "application/json",
    });
    assert.param("postId")(() => typia.assert(postId));
    return random();
  };
}

/**
 * @throws 404 게시글 ID를 찾을 수 없음
 * @controller PostController.update
 * @path PATCH /post/:id
 * @accessor api.functional.post.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
  input: update.Body,
): Promise<update.Output> {
  return true === connection.simulate
    ? update.simulate(connection, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          template: update.METADATA.path,
          path: update.path(id),
        },
        input,
      );
}
export namespace update {
  export type Body = Primitive<IPost.IUpdate>;
  export type Output = Primitive<IPost.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/post/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/post/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<IPost.ISummary>> =>
    typia.random<Primitive<IPost.ISummary>>();
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
    input: Body,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random();
  };
}

/**
 * @throws 404 Article not found for deletion
 * @controller PostController.remove
 * @path DELETE /post/:id
 * @accessor api.functional.post.remove
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function remove(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<remove.Output> {
  return true === connection.simulate
    ? remove.simulate(connection, id)
    : PlainFetcher.fetch(connection, {
        ...remove.METADATA,
        template: remove.METADATA.path,
        path: remove.path(id),
      });
}
export namespace remove {
  export type Output = Primitive<ISuccessResponse>;

  export const METADATA = {
    method: "DELETE",
    path: "/post/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/post/${encodeURIComponent(id?.toString() ?? "null")}`;
  export const random = (): Resolved<Primitive<ISuccessResponse>> =>
    typia.random<Primitive<ISuccessResponse>>();
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    return random();
  };
}
