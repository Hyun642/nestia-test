/**
 * @packageDocumentation
 * @module api.functional
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Primitive, Resolved } from "typia";
import typia from "typia";

export * as post from "./post/index";

/**
 * @controller AppController.getHello
 * @path GET /
 * @accessor api.functional.getHello
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getHello(
  connection: IConnection,
): Promise<getHello.Output> {
  return true === connection.simulate
    ? getHello.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getHello.METADATA,
        template: getHello.METADATA.path,
        path: getHello.path(),
      });
}
export namespace getHello {
  export type Output = Primitive<string>;

  export const METADATA = {
    method: "GET",
    path: "/",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/";
  export const random = (): Resolved<Primitive<string>> =>
    typia.random<Primitive<string>>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
